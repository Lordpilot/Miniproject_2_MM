Counting1("lung","tub","either") #here yy mean yes and yes for lung and tub
Counting1("lung","tub","0") # no one has both lung and tub
Counting1("bronc","either","dysp")
# Now we create a list of our CPT
library(gRain)
asia1 <- cptable(~asia, values = Counting1("asia","0","0"), levels = c("yes","no")) #putting observations together
tub.asia1<-cptable(~tub|asia, values = Counting1("asia","tub","0"),levels = c("yes","no")) # tub given asia
smoke1<-cptable(~smoke,values = Counting1("smoke","0","0"),levels = c("yes","no"))
lung.smoke1<-cptable(~lung|smoke,values = Counting1("smoke","lung","0"),levels = c("yes","no"))
bronc.smoke1<-cptable(~bronc|smoke,values = Counting1("smoke","bronc","0"),levels = c("yes","no"))
either.lung.tub1<-cptable(~either|lung:tub,values = Counting1("lung","tub","either"),levels = c("yes","no"))
xray.either1<-cptable(~xray|either,values = Counting1("either","xray","0"),levels = c("yes","no"))
dysp.bronc.either1<-cptable(~dysp|bronc:either,values = Counting1("bronc","either","dysp"),levels = c("yes","no"))
CPT.List1 <- compileCPT(list(asia1,tub.asia1,smoke1,lung.smoke1,bronc.smoke1,either.lung.tub1,xray.either1,dysp.bronc.either1))
CPT.List1 # overview of all CPT's
CPT.List1$asia #CPT for asia in percent
CPT.List1$tub
CPT.List1$smoke
CPT.List1$lung
CPT.List1$bronc
CPT.List1$either # the normal method can't read the CPT when we have 3 variables
CPT.List1$xray
CPT.List1$dysp # the normal method can't read the CPT when we have 3 variables
ftable(CPT.List1$either, row.vars = 1) #ftable helps us read the CPT when we have more the two variables.
ftable(CPT.List1$dysp, row.vars = 1)
dysp1 <- cptable(~ dysp,values = Counting1("dysp","0","0"),levels = c("yes","no")) #counting the number of observations for dysp
smoke.dysp1 <- cptable(~smoke|dysp,values = Counting1("dysp","smoke","0"),levels = c("yes","no")) # counting smoke given dysp
CPT.list2 <- compileCPT(list(dysp1,smoke.dysp1)) #creating our CPT
CPT.list2 # overview of CPT's
CPT.list2$smoke #our CPT for smoke given dysp in percentage
smoke1 <- cptable(~ smoke,values = Counting1("smoke","0","0"),levels = c("yes","no")) # counting smoke
bronc1 <- cptable(~bronc,values = Counting1("bronc","0","0"),levels = c("yes","no")) # counting bronc
lung.smoke1 <- cptable(~lung1|smoke,values = Counting1("smoke","lung","0"),levels = c("yes","no")) # counting lung given smoke
lung.smoke.bronc1 <- cptable(~lung2|smoke:bronc,values = Counting1("smoke","bronc","lung"),levels = c("yes","no")) # counting smoke given smoke and bronc
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
CPT.list3 # overview
CPT.list3$lung1
CPT.list3$lung2 # conditional on two variables so not pretty
ftable(CPT.list3$lung2, row.vars = 1) #for CPT's of more then two variables
Counting2 <- function(x,y,z,w){ #counting the number of observation for x,y,z and w
a11 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "yes" & chestSim1000[z] == "yes" & chestSim1000[w] == "yes")))
a12 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "yes" & chestSim1000[z] == "no" & chestSim1000[w] == "yes")))
a13 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "no" & chestSim1000[z] == "yes" & chestSim1000[w] == "yes")))
a14 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "no" & chestSim1000[z] == "no" & chestSim1000[w] == "yes")))
a15 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "yes" & chestSim1000[z] == "yes" & chestSim1000[w] == "yes")))
a16 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "yes" & chestSim1000[z] == "no" & chestSim1000[w] == "yes")))
a17 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "no" & chestSim1000[z] == "yes" & chestSim1000[w] == "yes")))
a18 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "no" & chestSim1000[z] == "no" & chestSim1000[w] == "yes")))
a21 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "yes" & chestSim1000[z] == "yes" & chestSim1000[w] == "no")))
a22 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "yes" & chestSim1000[z] == "no" & chestSim1000[w] == "no")))
a23 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "no" & chestSim1000[z] == "yes" & chestSim1000[w] == "no")))
a24 <- (length(which(chestSim1000[x]  == "yes" & chestSim1000[y] == "no" & chestSim1000[z] == "no" & chestSim1000[w] == "no")))
a25 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "yes" & chestSim1000[z] == "yes" & chestSim1000[w] == "no")))
a26 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "yes" & chestSim1000[z] == "no" & chestSim1000[w] == "no")))
a27 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "no" & chestSim1000[z] == "yes" & chestSim1000[w] == "no")))
a28 <- (length(which(chestSim1000[x]  == "no" & chestSim1000[y] == "no" & chestSim1000[z] == "no" & chestSim1000[w] == "no")))
mat1 <- matrix(c(a11,a12,a13,a14,a15,a16,a17,a18, a21,a22,a23,a24,a25,a26,a27,a28), nrow = 2, byrow = TRUE, dimnames = list(c("yes","no"),c("yyy","nyy","yny","nny","yyn","nyn","ynn","nnn")))
mat2<-names(dimnames(mat1))<-list(w,c(x,y,z))
print(mat1)
}
Counting2("smoke","dysp","bronc","lung") #our counted variables
Counting1("smoke", "dysp", "lung")
smoke1 <- cptable(~ smoke,values = Counting1("smoke","0","0"),levels = c("yes","no")) #counting smoke
dysp1 <- cptable(~ dysp,values = Counting1("dysp","0","0"),levels = c("yes","no"))
bronc1 <- cptable(~ bronc,values = Counting1("bronc","0","0"),levels = c("yes","no"))
lung.smoke.dysp1 <- cptable(~lung1|smoke:dysp, values = Counting1("smoke", "dysp", "lung"),levels = c("yes","no"))
lung.smoke.dysp.bronc1 <- cptable(~lung2|bronc:dysp:smoke, values = Counting2("bronc","dysp","smoke","lung"),levels = c("yes", "no"))
CPT.list4 <- compileCPT(list(smoke1,dysp1,bronc1,lung.smoke.dysp1,lung.smoke.dysp.bronc1)) #creating CPT's
CPT.list4 # overview
CPT.list4$lung1
ftable(CPT.list4$lung1, row.vars = 1) #pretty verison
CPT.list4$lung2
ftable(CPT.list4$lung2, row.vars = 1) #pretty version
Bay.net2 <- grain(CPT.list2)
Bay.net2 <- compile(Bay.net2)
Bay.net2
plot(Bay.net2$dag)
plot(moralize(Bay.net2$dag))
plot(triangulate(moralize(Bay.net2$dag)))
# data from exercise 3
Bay.net3 <- grain(CPT.list3)
Bay.net3 <- compile(Bay.net3)
Bay.net3
plot(Bay.net3$dag)
plot(moralize(Bay.net3$dag))
plot(triangulate(moralize(Bay.net3$dag)))
plot(moralize(Bay.net3$dag))
plot(triangulate(moralize(Bay.net3$dag)))
# data from exercise 4
Bay.net4 <- grain(CPT.list4)
Bay.net4 <- compile(Bay.net4)
Bay.net4
plot(Bay.net4$dag)
plot(moralize(Bay.net4$dag))
plot(triangulate(moralize(Bay.net4$dag)))
install.packages("MLmetrics")
knitr::opts_chunk$set(echo = TRUE)
# data from exercise 1
Bay.net1 <- grain(CPT.List1) #turns our CPT into a graphical independent network
# data from exercise 1
Bay.net1 <- grain(CPT.List1) #turns our CPT into a graphical independent network
library(gRbase)
library(gRbase)
library(gRain)
# data from exercise 1
Bay.net1 <- grain(CPT.List1) #turns our CPT into a graphical independent network
Bay.net1 <- compile(Bay.net1) # compiles our data
Bay.net1
plot(Bay.net1$dag) # plot using the relations used under construction
plot(moralize(Bay.net1$dag)) # a version which drops directions
plot(triangulate(moralize(Bay.net1$dag))) # will triangulate a undirected graph by adding fill-ins
# data from exercise 4
Bay.net4 <- grain(CPT.list4)
Bay.net4 <- compile(Bay.net4)
Bay.net4
plot(Bay.net4$dag)
plot(moralize(Bay.net4$dag))
plot(triangulate(moralize(Bay.net4$dag)))
ug(dysp.bronc.either1)
plot(ug(dysp.bronc.either1))
plot(ug(dysp1))
plot(ug(CPT.list4$lung1))
plot(ug(CPT.list4$lung2))
plot(ug(CPT.list4$smoke))
plot(ug(CPT.list4$dysp))
plot(ug(CPT.list1$tub))
plot(ug(CPT.List1$tub))
plot(ug(CPT.List1$tub))
plot(ug(CPT.List1))
s <- xtabs(~smoke, chestSim1000); s
CPT.List1$dysp # the normal method can't read the CPT when we have 3 variables
CPT.List1$smoke
CPT.List1$smoke
s <- as.parray(s, normalize="first"); s
t <- as.parray(t, normalize="first"); t
b.s <- xtabs(~lung+bronc+smoke, chestSim1000); b.s
CPT.List1$lung
CPT.List1$either # the normal method can't read the CPT when we have 3 variables
b.s <- xtabs(~either+lung+tub, chestSim1000); b.s
CPT.List1$either # the normal method can't read the CPT when we have 3 variables
b.s <- xtabs(~either+lung+tub, chestSim1000); b.s
CPT.List1$either # the normal method can't read the CPT when we have 3 variables
b.s <- xtabs(~either+lung+tub, chestSim1000); b.s
CPT.List1$either # the normal method can't read the CPT when we have 3 variables
either.lung.tub1<-cptable(~either|lung:tub,values = Counting1("lung","tub","either"),levels = c("yes","no"))
b.s <- xtabs(~either+lung+tub, chestSim1000); b.s
smoke1 <- cptable(~ smoke,values = Counting1("smoke","0","0"),levels = c("yes","no")) #counting smoke
smoke1 <- xtabs(~smoke, chestSim1000); smoke1
dysp1 <- cptable(~ dysp,values = Counting1("dysp","0","0"),levels = c("yes","no"))
dysp1 <- xtabs(~smoke, chestSim1000); dysp1
dysp1 <- xtabs(~smoke, chestSim1000); dysp1
dysp1 <- cptable(~ dysp,values = Counting1("dysp","0","0"),levels = c("yes","no"))
dysp1 <- xtabs(~smoke, chestSim1000); dysp1
dysp1 <- xtabs(~dysp, chestSim1000); dysp1
dysp1 <- cptable(~ dysp,values = Counting1("dysp","0","0"),levels = c("yes","no"))
dysp1 <- xtabs(~dysp, chestSim1000); dysp1
bronc1 <- cptable(~ bronc,values = Counting1("bronc","0","0"),levels = c("yes","no"))
bronc1 <- xtabs(~bronc, chestSim1000); bronc1
bronc1 <- cptable(~ bronc,values = Counting1("bronc","0","0"),levels = c("yes","no"))
bronc1 <- xtabs(~bronc, chestSim1000); bronc1
lung.smoke.dysp1 <- cptable(~lung1|smoke:dysp, values = Counting1("smoke", "dysp", "lung"),levels = c("yes","no"))
lung.smoke.dysp1 <- xtabs(~lung+smoke+dysp, chestSim1000); lung.smoke.dysp1
lung.smoke.dysp.bronc1 <- cptable(~lung2|bronc:dysp:smoke, values = Counting2("bronc","dysp","smoke","lung"),levels = c("yes", "no"))
lung.smoke.dysp.bronc1 <- xtabs(~lung+smoke+dysp+bronc, chestSim1000);lung.smoke.dysp.bronc1
lung.smoke.dysp.bronc1 <- cptable(~lung2|bronc:dysp:smoke, values = Counting2("bronc","dysp","smoke","lung"),levels = c("yes", "no"))
lung.smoke.dysp.bronc1 <- xtabs(~lung+smoke+dysp+bronc, chestSim1000);lung.smoke.dysp.bronc1
tub.asia1<-cptable(~tub|asia, values = Counting1("asia","tub","0"),levels = c("yes","no")) # tub given asia
tub.asia1 <- xtabs(~tub+asia, chestSim1000); tub.asia1
smoke1<-cptable(~smoke,values = Counting1("smoke","0","0"),levels = c("yes","no"))
smoke1 <- xtabs(~smoke, chestSim1000); smoke1
lung.smoke1<-cptable(~lung|smoke,values = Counting1("smoke","lung","0"),levels = c("yes","no"))
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1
bronc.smoke1<-cptable(~bronc|smoke,values = Counting1("smoke","bronc","0"),levels = c("yes","no"))
bronc.smoke1 <- xtabs(~bronc+smoke, chestSim1000); bronc.smoke1
either.lung.tub1<-cptable(~either|lung:tub,values = Counting1("lung","tub","either"),levels = c("yes","no"))
either.lung.tub1 <- xtabs(~either+lung+tub, chestSim1000); either.lung.tub1
xray.either1<-cptable(~xray|either,values = Counting1("either","xray","0"),levels = c("yes","no"))
xray.either1 <- xtabs(~xray+either, chestSim1000); xray.either1
dysp.bronc.either1<-cptable(~dysp|bronc:either,values = Counting1("bronc","either","dysp"),levels = c("yes","no"))
dysp.bronc.either1 <- xtabs(~dysp+bronc+either, chestSim1000); dysp.bronc.either1
dysp1 <- cptable(~ dysp,values = Counting1("dysp","0","0"),levels = c("yes","no")) #counting the number of observations for dysp
dysp1 <- xtabs(~dysp, chestSim1000); dysp1
smoke.dysp1 <- cptable(~smoke|dysp,values = Counting1("dysp","smoke","0"),levels = c("yes","no")) # counting smoke given dysp
smoke.dysp1 <- xtabs(~smoke+dysp, chestSim1000); smoke.dysp1
smoke1 <- cptable(~ smoke,values = Counting1("smoke","0","0"),levels = c("yes","no")) # counting smoke
smoke1 <- xtabs(~smoke, chestSim1000); smoke1
bronc1 <- cptable(~bronc,values = Counting1("bronc","0","0"),levels = c("yes","no")) # counting bronc
bronc1 <- xtabs(~bronc, chestSim1000); bronc1
lung.smoke1 <- cptable(~lung1|smoke,values = Counting1("smoke","lung","0"),levels = c("yes","no")) # counting lung given smoke
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1
lung.smoke.bronc1 <- cptable(~lung2|smoke:bronc,values = Counting1("smoke","bronc","lung"),levels = c("yes","no")) # counting smoke given smoke and bronc
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1
asia1 <- xtabs(~asia, chestSim1000); asia1 #putting observations together
tub.asia1 <- xtabs(~tub+asia, chestSim1000); tub.asia1 # tub given asia
smoke1 <- xtabs(~smoke, chestSim1000); smoke1
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1
bronc.smoke1 <- xtabs(~bronc+smoke, chestSim1000); bronc.smoke1
either.lung.tub1 <- xtabs(~either+lung+tub, chestSim1000); either.lung.tub1
xray.either1 <- xtabs(~xray+either, chestSim1000); xray.either1
dysp.bronc.either1 <- xtabs(~dysp+bronc+either, chestSim1000); dysp.bronc.either1
CPT.List1 <- compileCPT(list(asia1,tub.asia1,smoke1,lung.smoke1,bronc.smoke1,either.lung.tub1,xray.either1,dysp.bronc.either1))
CPT.List1 # overview of all CPT's
CPT.List1$asia #CPT for asia in percent
CPT.List1$tub
CPT.List1$smoke
CPT.List1$lung
CPT.List1$bronc
CPT.List1$either # the normal method can't read the CPT when we have 3 variables
CPT.List1$xray
CPT.List1$dysp # the normal method can't read the CPT when we have 3 variables
ftable(CPT.List1$either, row.vars = 1) #ftable helps us read the CPT when we have more the two variables.
ftable(CPT.List1$dysp, row.vars = 1)
# Constructing the conditional probability tables
asia1 <-  as.parray(~asia1, normalize="first"); asia1
# Constructing the conditional probability tables
asia1 <-  as.parray(asia1, normalize="first"); asia1
# Constructing the conditional probability tables
asia1 <-  as.parray(asia1, normalize="first"); asia1
tub.asia1 <-  as.parray(tub.asia1, normalize="first"); tub.asia1
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
bronc.smoke1 <-  as.parray(bronc.smoke1, normalize="first"); bronc.smoke1
either.lung.tub1 <-  as.parray(either.lung.tub1, normalize="first"); either.lung.tub1
xray.either1 <-  as.parray(xray.either1, normalize="first"); xray.either1
dysp.bronc.either1 <-  as.parray(dysp.bronc.either1, normalize="first"); dysp.bronc.either1
CPT.List1 <- compileCPT(list(asia1,tub.asia1,smoke1,lung.smoke1,bronc.smoke1,either.lung.tub1,xray.either1,dysp.bronc.either1))
CPT.List1 # overview of all CPT's
CPT.list1 <- compileCPT(list(asia1,tub.asia1,smoke1,lung.smoke1,bronc.smoke1,either.lung.tub1,xray.either1,dysp.bronc.either1))
CPT.list1 # overview of all CPT's
plot(CPT.list1)
plot(grain(CPT.list1))
CPT.List1$asia #CPT for asia in percent
# Constructing the conditional probability tables
asia1 <-  as.parray(asia1, normalize="first"); asia1
CPT.list1 <- compileCPT(list(asia1,tub.asia1,smoke1,lung.smoke1,bronc.smoke1,either.lung.tub1,xray.either1,dysp.bronc.either1))
CPT.list1 # overview of all CPT's
CPT.list1$asia #CPT for asia in percent
CPT.list1$tub
CPT.list1$smoke
plot(grain(CPT.list1))
plot(compile(grain(CPT.list1)))
plot(compile(grain(CPT.list1)))
# data from exercise 1
Bay.net1 <- grain(CPT.list1) #turns our CPT into a graphical independent network
Bay.net1 <- compile(Bay.net1) # compiles our data
Bay.net1
plot(Bay.net1$dag) # plot using the relations used under construction
plot1=compile(grain(CPT.list1))
plot(plot1$dag)
plot(plot1$control)
plot(plot1$universe)
plot(plot1$cptlist)
plot(plot1$rip)
plot(plot1$ug)
bronc.smoke1 <-  as.parray(bronc.smoke1, normalize="first"); bronc.smoke1
either.lung.tub1 <-  as.parray(either.lung.tub1, normalize="first"); either.lung.tub1
xray.either1 <-  as.parray(xray.either1, normalize="first"); xray.either1
dysp.bronc.either1 <-  as.parray(dysp.bronc.either1, normalize="first"); dysp.bronc.either1
ftable(CPT.list1$either, row.vars = 1) #ftable helps us read the CPT when we have more the two variables.
ftable(CPT.list1$dysp, row.vars = 1)
either.lung.tub1 <-  as.parray(either.lung.tub1, normalize="first"); either.lung.tub1
either.lung.tub1 <-  as.parray(either.lung.tub1, normalize="first"); either.lung.tub1
ftable(either.lung.tub1, row.vars = 1) #ftable helps us read the CPT when we have more the two variables.
either.lung.tub1 <-  as.parray(either.lung.tub1, normalize="first"); either.lung.tub1
ftable(either.lung.tub1, row.vars = 1) #ftable helps us read the CPT when we have more the two variables.
dysp.bronc.either1 <-  as.parray(dysp.bronc.either1, normalize="first"); dysp.bronc.either1
ftable(dysp.bronc.either1, row.vars = 1)
dysp.bronc.either1 <-  as.parray(dysp.bronc.either1, normalize="first"); dysp.bronc.either1
ftable(dysp.bronc.either1, row.vars = 1)
plot(plot1$dag)
plot(plot1$ug)
dysp1 <- xtabs(~dysp, chestSim1000); dysp1 #counting the number of observations for dysp
dysp1 <- xtabs(~dysp, chestSim1000); dysp1 #counting the number of observations for dysp
smoke.dysp1 <- xtabs(~smoke+dysp, chestSim1000); smoke.dysp1  # counting smoke given dysp
# Constructing the conditional probability tables
dysp1 <-  as.parray(dysp1, normalize="first"); dysp1
smoke.dysp1 <-  as.parray(smoke.dysp1, normalize="first"); smoke.dysp1
CPT.list2$smoke #our CPT for smoke given dysp in percentage
CPT.list2 <- compileCPT(list(dysp1,smoke.dysp1)) #creating our CPT list
CPT.list2 # overview of CPT's
smoke1 <- xtabs(~smoke, chestSim1000); smoke1 # counting smoke
bronc1 <- xtabs(~bronc, chestSim1000); bronc1 # counting bronc
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
ftable(lung.smoke.bronc1, row.vars = 1) #for CPT's of more then two variables
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
smoke1 <- xtabs(~smoke, chestSim1000); smoke1 # counting smoke
bronc1 <- xtabs(~bronc, chestSim1000); bronc1 # counting bronc
lung.smoke2 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
lung.smoke.bronc1 <-  as.parray(lung.smoke.bronc1, normalize="first"); lung.smoke.bronc1
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
CPT.list3 # overview
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
CPT.list2 <- compileCPT(list(dysp1,smoke.dysp1)) #creating our CPT list
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1,lung.smoke.bronc1)) #creating our CPT's
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1)) #creating our CPT's
CPT.list3 # overview
smoke1 <- xtabs(~smoke, chestSim1000); smoke1 # counting smoke
bronc1 <- xtabs(~bronc, chestSim1000); bronc1 # counting bronc
lung.smoke2 <- xtabs(~lung1+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke.bronc1 <- xtabs(~lung2+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
lung.smoke1 <- xtabs(~lung1+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
ftable(lung.smoke.bronc1, row.vars = 1) #for CPT's of more then two variables
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
lung.smoke.bronc1 <-  as.parray(lung.smoke.bronc1, normalize="first"); lung.smoke.bronc1
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
lung.smoke.bronc1 <-  as.parray(lung.smoke.bronc1, normalize="first"); lung.smoke.bronc1
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
ftable(lung.smoke.bronc1, row.vars = 1) #for CPT's of more then two variables
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
lung.smoke.bronc1 <-  as.parray(lung.smoke.bronc1, normalize="first"); lung.smoke.bronc1
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
CPT.list3$lung1
CPT.list3$lung2 # conditional on two variables so not pretty
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
CPT.list3.1 <- compileCPT(list(smoke1,bronc1,lung.smoke1)) #creating our CPT's
CPT.list3.2 <- compileCPT(list(lung.smoke.bronc1))
CPT.list3all=c(CPT.list3.1,CPT.list3.2)
CPT.list3all # overview
CPT.list3$lung1
CPT.list3$lung2 # conditional on two variables so not pretty
CPT.list3all=compileCPT(list(CPT.list3.1,CPT.list3.2))
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
CPT.list3 # overview
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
CPT.list3 # overview
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1),forceCheck = FALSE) #creating our CPT's
CPT.list3 # overview
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1),forceCheck = FALSE) #creating our CPT's
plot(Bay.net2$dag)
plot(Bay.net3$dag)
CPT.list3 <- compileCPT(list(smoke1,bronc1,lung.smoke1, lung.smoke.bronc1)) #creating our CPT's
CPT.list3 <- compileCPT(list(smoke1,bronc1, lung.smoke.bronc1)) #creating our CPT's note lunge is included two times so we use the largest
CPT.list3 # overview
CPT.list3$lung1
CPT.list3$lung2 # conditional on two variables so not pretty
smoke1 <- xtabs(~smoke, chestSim1000); smoke1 #counting smoke
dysp1 <- xtabs(~dysp, chestSim1000); dysp1
bronc1 <- xtabs(~bronc, chestSim1000); bronc1
lung.smoke.dysp1 <- xtabs(~lung+smoke+dysp, chestSim1000); lung.smoke.dysp1
lung.smoke.dysp.bronc1 <- xtabs(~lung+smoke+dysp+bronc, chestSim1000);lung.smoke.dysp.bronc1
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
dysp1 <-  as.parray(dysp1, normalize="first"); dysp1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke.dysp1 <-  as.parray(lung.smoke.dysp1, normalize="first"); lung.smoke.dysp1
lung.smoke.dysp.bronc1 <- xtabs(~lung+smoke+dysp+bronc, chestSim1000);lung.smoke.dysp.bronc1
ftable(lung.smoke.dysp1, row.vars = 1) #pretty verison
lung.smoke.dysp.bronc1 <-  as.parray(lung.smoke.dysp.bronc1, normalize="first"); lung.smoke.dysp.bronc1
ftable(lung.smoke.dysp.bronc1, row.vars = 1) #pretty verison
CPT.list4 <- compileCPT(list(smoke1,dysp1,bronc1,lung.smoke.dysp1,lung.smoke.dysp.bronc1)) #creating CPT's
CPT.list4 <- compileCPT(list(smoke1,dysp1,bronc1,lung.smoke.dysp.bronc1)) #creating CPT's list again we use the largest model to avoid repeating nodes
CPT.list4 # overview
# data from exercise 1
plot1=compile(grain(CPT.list1))
plot(plot1$dag)
plot(plot1$ug)
plot(plot1$dag)
plot(plot1$ug)
plot2=compile(grain(CPT.list2))
plot(plot2$dag)
plot(plot2$ug)
plot3=compile(grain(CPT.list3))
plot(plot3$dag)
plot(plot3$ug)
plot4=compile(grain(CPT.list4))
plot(plot4$dag)
plot(plot4$ug)
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
dysp1 <-  as.parray(dysp1, normalize="first"); dysp1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke.dysp1 <-  as.parray(lung.smoke.dysp1, normalize="first"); lung.smoke.dysp1
ftable(lung.smoke.dysp1, row.vars = 1) #pretty verison
lung.smoke.dysp.bronc1 <-  as.parray(lung.smoke.dysp.bronc1, normalize="first"); lung.smoke.dysp.bronc1
ftable(lung.smoke.dysp.bronc1, row.vars = 1) #pretty verison
# construct the Bayesian network
plot1=compile(grain(CPT.list1))
plot(plot1$dag)
# construct the Bayesian network
plot1=compile(grain(CPT.list1))
# construct the Bayesian network
plot1=compile(grain(CPT.list1));plot1
plot(plot1$dag)
# data from exercise 1
plot1=compile(grain(CPT.list1)) #turns CPT into a graphical independent network and the compiles them
plot(plot1$dag) # the plot containing the Directed Acyclic Graph
plot(plot1$dag) # the plot containing the Directed Acyclic Graph
plot(plot1$ug) # marrying parents and removing directions produces the Moral Graph
plot(moralize(plot1))
# data from exercise 1
plot1=compile(grain(CPT.list1)) #turns CPT into a graphical independent network and the compiles them
plot(moralize(plot1$ug))
# data from exercise 1
plot1=compile(grain(CPT.list1)) #turns CPT into a graphical independent network and the compiles them
plot(plot1$dag) # marrying parents and removing directions produces the Moral Graph
plot(moralize(plot1$dag))
plot(moralize(plot1$dag)) # marrying parents and removing directions produces the Moral Graph
plot2=compile(grain(CPT.list2))
plot(plot2$dag)
plot(moralize(plot2$dag))
plot3=compile(grain(CPT.list3))
plot(plot3$dag)
plot(moralize(plot3$dag))
plot4=compile(grain(CPT.list4))
plot(plot4$dag)
plot(moralize(plot4$dag))
plot(moralize(plot2$dag))
plot(moralize(plot1$dag)) # marrying parents and removing directions produces the Moral Graph
# construct the Bayesian network
plot1=compile(grain(CPT.list1));plot1
plot(plot1$dag) # the Directed Acyclic Graph
knitr::opts_chunk$set(echo = TRUE)
# data from exercise 2
plot2=compile(grain(CPT.list2))
library(gRbase)
library(gRain)
library(gRain)
asia1 <- xtabs(~asia, chestSim1000); asia1 #putting observations together
tub.asia1 <- xtabs(~tub+asia, chestSim1000); tub.asia1 # counting tub given asia
smoke1 <- xtabs(~smoke, chestSim1000); smoke1
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1
bronc.smoke1 <- xtabs(~bronc+smoke, chestSim1000); bronc.smoke1
either.lung.tub1 <- xtabs(~either+lung+tub, chestSim1000); either.lung.tub1
xray.either1 <- xtabs(~xray+either, chestSim1000); xray.either1
dysp.bronc.either1 <- xtabs(~dysp+bronc+either, chestSim1000); dysp.bronc.either1
# Constructing the conditional probability tables
asia1 <-  as.parray(asia1, normalize="first"); asia1
tub.asia1 <-  as.parray(tub.asia1, normalize="first"); tub.asia1
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
bronc.smoke1 <-  as.parray(bronc.smoke1, normalize="first"); bronc.smoke1
either.lung.tub1 <-  as.parray(either.lung.tub1, normalize="first"); either.lung.tub1
ftable(either.lung.tub1, row.vars = 1) #ftable helps us read the CPT when we have more the two variables.
xray.either1 <-  as.parray(xray.either1, normalize="first"); xray.either1
dysp.bronc.either1 <-  as.parray(dysp.bronc.either1, normalize="first"); dysp.bronc.either1
ftable(dysp.bronc.either1, row.vars = 1)
CPT.list1 <- compileCPT(list(asia1,tub.asia1,smoke1,lung.smoke1,bronc.smoke1,either.lung.tub1,xray.either1,dysp.bronc.either1))
CPT.list1 # overview of all CPT's
# construct the Bayesian network
plot1=compile(grain(CPT.list1));plot1
plot(plot1$dag) # the Directed Acyclic Graph
dysp1 <- xtabs(~dysp, chestSim1000); dysp1 #counting the number of observations for dysp
smoke.dysp1 <- xtabs(~smoke+dysp, chestSim1000); smoke.dysp1  # counting smoke given dysp
# Constructing the conditional probability tables
dysp1 <-  as.parray(dysp1, normalize="first"); dysp1
smoke.dysp1 <-  as.parray(smoke.dysp1, normalize="first"); smoke.dysp1
CPT.list2 <- compileCPT(list(dysp1,smoke.dysp1)) #creating our CPT list
CPT.list2 # overview of CPT's
smoke1 <- xtabs(~smoke, chestSim1000); smoke1 # counting smoke
bronc1 <- xtabs(~bronc, chestSim1000); bronc1 # counting bronc
lung.smoke1 <- xtabs(~lung+smoke, chestSim1000); lung.smoke1 # counting lung given smoke
lung.smoke.bronc1 <- xtabs(~lung+smoke+bronc, chestSim1000); lung.smoke.bronc1 # counting smoke given smoke and bronc
ftable(lung.smoke.bronc1, row.vars = 1) #for CPT's of more then two variables
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke1 <-  as.parray(lung.smoke1, normalize="first"); lung.smoke1
lung.smoke.bronc1 <-  as.parray(lung.smoke.bronc1, normalize="first"); lung.smoke.bronc1
CPT.list3 <- compileCPT(list(smoke1,bronc1, lung.smoke.bronc1)) #creating our CPT's note lunge is included two times so we use the largest
CPT.list3 # overview
smoke1 <- xtabs(~smoke, chestSim1000); smoke1 #counting smoke
dysp1 <- xtabs(~dysp, chestSim1000); dysp1
bronc1 <- xtabs(~bronc, chestSim1000); bronc1
lung.smoke.dysp1 <- xtabs(~lung+smoke+dysp, chestSim1000); lung.smoke.dysp1
lung.smoke.dysp.bronc1 <- xtabs(~lung+smoke+dysp+bronc, chestSim1000);lung.smoke.dysp.bronc1
# Constructing the conditional probability tables
smoke1 <-  as.parray(smoke1, normalize="first"); smoke1
dysp1 <-  as.parray(dysp1, normalize="first"); dysp1
bronc1 <-  as.parray(bronc1, normalize="first"); bronc1
lung.smoke.dysp1 <-  as.parray(lung.smoke.dysp1, normalize="first"); lung.smoke.dysp1
ftable(lung.smoke.dysp1, row.vars = 1) #pretty verison
lung.smoke.dysp.bronc1 <-  as.parray(lung.smoke.dysp.bronc1, normalize="first"); lung.smoke.dysp.bronc1
ftable(lung.smoke.dysp.bronc1, row.vars = 1) #pretty verison
CPT.list4 <- compileCPT(list(smoke1,dysp1,bronc1,lung.smoke.dysp.bronc1)) #creating CPT's list again we use the largest model to avoid repeating nodes
CPT.list4 # overview
# data from exercise 1
plot1=compile(grain(CPT.list1)) #turns CPT into a graphical independent network and the compiles them
plot(plot1$dag) # the plot containing the Directed Acyclic Graph
plot(moralize(plot1$dag)) # marrying parents and removing directions produces the Moral Graph
# data from exercise 2
plot2=compile(grain(CPT.list2))
plot(plot2$dag)
# data from exercise 3
plot3=compile(grain(CPT.list3))
plot(plot3$dag)
# data from exercise 4
plot4=compile(grain(CPT.list4))
plot(plot4$dag)
